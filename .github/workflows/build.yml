name: Release Preparation

on:
  pull_request:
    types: [labeled]

jobs:
  prepare-for-release-build:
    if: github.event.label.name == 'Build'
    runs-on: windows-latest
    # strategy:
    #   matrix:
    #     dotnet-version: [ '4.8' ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    # - name: Set up dotnet ${{ matrix.dotnet-version }}
    #   uses: actions/setup-dotnet@v3
    #   with:
    #     dotnet-version: ${{ matrix.dotnet-version }}
    # - name: Verify dotnet installation
    #   run: dotnet --version
    - name: MSSQL - Setup for Build
      run: |
          (Get-Content ./MusicDatabaseGenerator/App.config).Replace('<connectionStrings configSource="sqlite.config">', '<connectionStrings configSource="mssql.config">') | Set-Content ./MusicDatabaseGenerator/App.config
          (Get-Content ./PlaylistTransferTool/App.config).Replace('<connectionStrings configSource="sqlite.config">', '<connectionStrings configSource="mssql.config">') | Set-Content ./PlaylistTransferTool/App.config
    - name: MSSQL - Install dependencies
      run: |
          nuget restore MusicDatabaseGenerator.sln
    - name: MSSQL - Compile and Build C#
      run: C:\"Program Files"\"Microsoft Visual Studio"\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe -property:Configuration=Release # we could set up a whole fancy path alias thing but who cares honestly
    - name: MSSQL - Copy Executables
      run: |
          New-Item -ItemType Directory -Force -Path build
          New-Item -ItemType Directory -Force -Path build/MSSQL
          cp ./MusicDatabaseGenerator/bin/Release/MusicDatabaseGenerator.exe ./build/MSSQL/MusicDatabaseGenerator/bin/Release/MusicDatabaseGenerator.exe
          cp ./PlaylistTransferTool/bin/Release/PlaylistTransferTool.exe ./build/MSSQL/PlaylistTransferTool/bin/Release/PlaylistTransferTool.exe
    - name: MSSQL - Commit Changes
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add .
        git reset ./MusicDatabaseGenerator/App.config
        git reset ./PlaylistTransferTool/App.config
        git commit -m "MSSQL: Build and Zip"
        git push origin ${{ github.event.pull_request.head.ref }}
    - name: SQLite - Setup for Build
      run: |
          (Get-Content ./MusicDatabaseGenerator/App.config).Replace('<connectionStrings configSource="mssql.config">', '<connectionStrings configSource="sqlite.config">') | Set-Content ./MusicDatabaseGenerator/App.config
          (Get-Content ./PlaylistTransferTool/App.config).Replace('<connectionStrings configSource="mssql.config">', '<connectionStrings configSource="sqlite.config">') | Set-Content ./PlaylistTransferTool/App.config
    - name: SQLite - Install dependencies
      run: |
          nuget restore MusicDatabaseGenerator.sln
    - name: SQLite - Compile and Build C#
      run: C:\"Program Files"\"Microsoft Visual Studio"\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe -property:Configuration=Release # we could set up a whole fancy path alias thing but who cares honestly
    - name: SQLite - Copy Executables
      run: |
          New-Item -ItemType Directory -Force -Path build
          New-Item -ItemType Directory -Force -Path build/SQLite
          cp ./MusicDatabaseGenerator/bin/Release/MusicDatabaseGenerator.exe ./build/SQLite/MusicDatabaseGenerator/bin/Release/MusicDatabaseGenerator.exe
          cp ./PlaylistTransferTool/bin/Release/PlaylistTransferTool.exe ./build/SQLite/PlaylistTransferTool/bin/Release/PlaylistTransferTool.exe
    - name: SQLite - Commit Changes
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add .
        git reset ./MusicDatabaseGenerator/App.config
        git reset ./PlaylistTransferTool/App.config
        git commit -m "SQLite: Build and Zip"
        git push origin ${{ github.event.pull_request.head.ref }}
    # - name: Create Release
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     PR_BODY: ${{ github.event.pull_request.body }}
    #     PR_URL: ${{ github.event.pull_request.html_url }}
    #   run: |
    #     RELEASE_BRANCH=${{ github.event.pull_request.head.ref }}
    #     RELEASE_BODY="""$PR_BODY

    #     $PR_URL"""
    #     RELEASE_TAG=$(grep -oP "(?<=music-database-generator: )[0-9]+\.[0-9]+\.[0-9]+" ./prod-versions.ini)
    #     RELEASE_TITLE="$RELEASE_TAG: ${{ github.event.pull_request.title }}"
    #     gh release create "$RELEASE_TAG" --title "$RELEASE_TITLE" --notes "$RELEASE_BODY" --target $RELEASE_BRANCH -d
    #     gh release upload "$RELEASE_TAG" "./build/MSSQL_MusicDatabaseGenerator.zip"
    #     gh release upload "$RELEASE_TAG" "./build/MSSQL_PlaylistTransferTool.zip"
    #     gh release upload "$RELEASE_TAG" "./build/SQLite_MusicDatabaseGenerator.zip"
    #     gh release upload "$RELEASE_TAG" "./build/SQLite_PlaylistTransferTool.zip"