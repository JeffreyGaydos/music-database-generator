using System;
using System.Collections.Generic;
using System.IO;

namespace PlaylistTransferTool
{
    public static class LoggingUtils
    {
        private static StreamWriter transferToolLog;
        private static readonly string loggingPathPrefix = "../../";
        private static string transferToolLogPath = $"{loggingPathPrefix}transfer_tool_log.txt";
        private static readonly string _tab = "    ";
        private static string header => $"Time (UTC): {DateTime.UtcNow}. Logs generated by the \"Playlist Transfer Tool\" (https://github.com/JeffreyGaydos/music-database-generator)";

        public static void Init()
        {
            transferToolLog = new StreamWriter(transferToolLogPath);

            GenerationLogWriteComment(header);
        }

        public static void GenerationLogWriteComment(string content)
        {
            transferToolLog.WriteLine($"# {content}");
            transferToolLog.Flush();
            Console.WriteLine($"# {content}");
        }

        public static void GenerationLogWriteData(string content, bool noConsole = false)
        {
            transferToolLog.WriteLine($"{(noConsole ? _tab : "")}{content}");
            transferToolLog.Flush();
            if (!noConsole)
                Console.WriteLine(content);
        }

        public static void GenerationLogWriteDataSameLine(string content)
        {
            transferToolLog.Write(content);
            transferToolLog.Flush();
            Console.Write(content);
        }

        public static void Close()
        {
            GenerationLogWriteComment($"Completed at {DateTime.UtcNow} (UTC)");
            transferToolLog.Close();
        }

        private static int loadingIncrement;
        private static int counter;
        public static void LoadingBar(string title, List<string> dataToProcess, Func<string, string> work)
        {
            if (title.Length > 30)
            {
                throw new Exception("Loading bars must have titles that are 30 characters or less so we can effectively line up each bar");
            }
            string titlePadding = new string(' ', 30 - title.Length);
            GenerationLogWriteDataSameLine($"{title}:{titlePadding}");

            loadingIncrement = dataToProcess.Count / 50 == 0 ? 1 : dataToProcess.Count / 50;
            counter = 0;

            foreach (string data in dataToProcess)
            {
                work.Invoke(data);
                counter++;
                if (counter % loadingIncrement == 0)
                {
                    GenerationLogWriteDataSameLine("|");
                }
            }
            GenerationLogWriteData("");
        }

        private static int _maxLengthForPadding = 100;
        public static void GenerationLogWriteWithPaddingBetween2Strings(string log1, string log2)
        {
            string logPadding = log1.Length + log2.Length > _maxLengthForPadding ? " " : new string(' ', _maxLengthForPadding - log1.Length - log2.Length);
            GenerationLogWriteData($"{log1}{logPadding}{log2}");
        }
    }
}
